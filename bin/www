#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web-ecommence-remake:server');
var http = require('http');
const sharedsession = require("express-socket.io-session");
const { socket } = require("./../socket");

const { session } = require("../middleware/session");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require("socket.io")(server);

/**
 * Listen on provided port, on all network interfaces.
 */
io.use(
  sharedsession(session, {
    autoSave: true
  })
);

const SESSION_SECRET = process.env.SESSION_SECRET
var cookieParser = require('cookie-parser');

io.use(function (socket, next) {
  var parseCookie = cookieParser(SESSION_SECRET);
  var handshake = socket.request;
  console.log(123123123);
  parseCookie(handshake, null, function (err, data) {
    sessionService.get(handshake, function (err, session) {
      if (err)
        next(new Error(err.message));
      if (!session)
        next(new Error("Not authorized"));

      handshake.session = session;
      next();
    });
  });
});

// io.of('/cart').use(sharedsession(session, {
//   autoSave: true
// }));

socket(server);

server.listen(port, _ => {
  console.log(`Server listen at port ${port}`);
});

server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
